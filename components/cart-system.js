/**
 * CartSystem - Modern shopping cart with persistent storage
 * Handles cart operations, quantity management, and local storage
 */
class CartSystem {
    constructor() {
        this.cart = this.loadCart();
        this.cartCount = 0;
        this.cartTotal = 0;
        this.listeners = new Map();
        
        // Initialize cart UI
        this.initializeCartUI();
        this.updateCartDisplay();
        
        // Bind methods
        this.handleStorageChange = this.handleStorageChange.bind(this);
        
        // Listen for storage changes (for multi-tab sync)
        window.addEventListener('storage', this.handleStorageChange);
        
        console.log('CartSystem initialized');
    }

    /**
     * Initialize cart UI elements
     */
    initializeCartUI() {\n        // Update cart icon if it exists\n        const cartIcon = document.querySelector('.cart-icon');\n        if (cartIcon) {\n            cartIcon.style.position = 'relative';\n            cartIcon.style.cursor = 'pointer';\n            cartIcon.addEventListener('click', () => this.toggleCartModal());\n        }\n        \n        // Create cart badge\n        this.createCartBadge();\n    }\n\n    /**\n     * Create cart badge for item count\n     */\n    createCartBadge() {\n        const cartIcon = document.querySelector('.cart-icon');\n        if (!cartIcon) return;\n        \n        const badge = document.createElement('span');\n        badge.className = 'cart-badge';\n        badge.textContent = '0';\n        cartIcon.appendChild(badge);\n    }\n\n    /**\n     * Add item to cart\n     */\n    addToCart(product, quantity = 1) {\n        const itemId = product.id || product.storeProductId;\n        const existingItem = this.cart.find(item => item.id === itemId);\n        \n        if (existingItem) {\n            existingItem.quantity += quantity;\n        } else {\n            this.cart.push({\n                id: itemId,\n                name: product.name || product.title,\n                price: this.parsePrice(product.price),\n                priceDisplay: product.price,\n                emoji: product.emoji || product.icon,\n                quantity: quantity,\n                addedAt: new Date().toISOString()\n            });\n        }\n        \n        this.saveCart();\n        this.updateCartDisplay();\n        this.notifyListeners('item_added', { product, quantity });\n        \n        // Show success message\n        if (window.toastSystem) {\n            window.toastSystem.showSuccess(`${product.name || product.title} added to cart!`);\n        }\n        \n        console.log('Item added to cart:', product);\n    }\n\n    /**\n     * Remove item from cart\n     */\n    removeFromCart(itemId) {\n        const itemIndex = this.cart.findIndex(item => item.id === itemId);\n        if (itemIndex > -1) {\n            const removedItem = this.cart[itemIndex];\n            this.cart.splice(itemIndex, 1);\n            \n            this.saveCart();\n            this.updateCartDisplay();\n            this.notifyListeners('item_removed', { item: removedItem });\n            \n            if (window.toastSystem) {\n                window.toastSystem.showInfo(`${removedItem.name} removed from cart`);\n            }\n        }\n    }\n\n    /**\n     * Update item quantity\n     */\n    updateQuantity(itemId, quantity) {\n        const item = this.cart.find(item => item.id === itemId);\n        if (item) {\n            if (quantity <= 0) {\n                this.removeFromCart(itemId);\n            } else {\n                item.quantity = quantity;\n                this.saveCart();\n                this.updateCartDisplay();\n                this.notifyListeners('quantity_updated', { item, quantity });\n            }\n        }\n    }\n\n    /**\n     * Clear entire cart\n     */\n    clearCart() {\n        this.cart = [];\n        this.saveCart();\n        this.updateCartDisplay();\n        this.notifyListeners('cart_cleared');\n        \n        if (window.toastSystem) {\n            window.toastSystem.showInfo('Cart cleared');\n        }\n    }\n\n    /**\n     * Get cart items\n     */\n    getCartItems() {\n        return [...this.cart];\n    }\n\n    /**\n     * Get cart count\n     */\n    getCartCount() {\n        return this.cart.reduce((total, item) => total + item.quantity, 0);\n    }\n\n    /**\n     * Get cart total\n     */\n    getCartTotal() {\n        return this.cart.reduce((total, item) => total + (item.price * item.quantity), 0);\n    }\n\n    /**\n     * Update cart display\n     */\n    updateCartDisplay() {\n        this.cartCount = this.getCartCount();\n        this.cartTotal = this.getCartTotal();\n        \n        // Update cart badge\n        const badge = document.querySelector('.cart-badge');\n        if (badge) {\n            badge.textContent = this.cartCount;\n            badge.style.display = this.cartCount > 0 ? 'flex' : 'none';\n        }\n        \n        // Update cart icon animation\n        const cartIcon = document.querySelector('.cart-icon');\n        if (cartIcon && this.cartCount > 0) {\n            cartIcon.classList.add('has-items');\n        } else if (cartIcon) {\n            cartIcon.classList.remove('has-items');\n        }\n    }\n\n    /**\n     * Show cart modal\n     */\n    toggleCartModal() {\n        if (window.modalSystem) {\n            this.showCartModal();\n        }\n    }\n\n    /**\n     * Show cart in modal\n     */\n    showCartModal() {\n        const cartItems = this.getCartItems();\n        const cartTotal = this.getCartTotal();\n        \n        let content = `\n            <div class=\"modal-header\">\n                <h2 class=\"modal-title\">Shopping Cart (${this.cartCount} items)</h2>\n                <button class=\"modal-close\" aria-label=\"Close cart\">\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                        <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n                    </svg>\n                </button>\n            </div>\n            <div class=\"modal-content\">\n        `;\n        \n        if (cartItems.length === 0) {\n            content += `\n                <div class=\"empty-cart\">\n                    <div class=\"empty-cart-icon\">ðŸ›’</div>\n                    <h3>Your cart is empty</h3>\n                    <p>Add some products to get started!</p>\n                    <button class=\"action-btn primary\" onclick=\"window.modalSystem.hideModal('cart-modal')\">Continue Shopping</button>\n                </div>\n            `;\n        } else {\n            content += '<div class=\"cart-items\">';\n            \n            cartItems.forEach(item => {\n                content += `\n                    <div class=\"cart-item\" data-item-id=\"${item.id}\">\n                        <div class=\"cart-item-image\">\n                            <span class=\"cart-item-emoji\">${item.emoji}</span>\n                        </div>\n                        <div class=\"cart-item-details\">\n                            <h4 class=\"cart-item-name\">${item.name}</h4>\n                            <p class=\"cart-item-price\">${item.priceDisplay}</p>\n                        </div>\n                        <div class=\"cart-item-quantity\">\n                            <button class=\"quantity-btn\" onclick=\"window.cartSystem.updateQuantity('${item.id}', ${item.quantity - 1})\">-</button>\n                            <span class=\"quantity-display\">${item.quantity}</span>\n                            <button class=\"quantity-btn\" onclick=\"window.cartSystem.updateQuantity('${item.id}', ${item.quantity + 1})\">+</button>\n                        </div>\n                        <div class=\"cart-item-total\">\n                            AED ${(item.price * item.quantity).toLocaleString()}\n                        </div>\n                        <button class=\"cart-item-remove\" onclick=\"window.cartSystem.removeFromCart('${item.id}')\">\n                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                <polyline points=\"3,6 5,6 21,6\"></polyline>\n                                <path d=\"m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2\"></path>\n                            </svg>\n                        </button>\n                    </div>\n                `;\n            });\n            \n            content += `\n                </div>\n                <div class=\"cart-summary\">\n                    <div class=\"cart-total\">\n                        <h3>Total: AED ${cartTotal.toLocaleString()}</h3>\n                    </div>\n                    <div class=\"cart-actions\">\n                        <button class=\"action-btn secondary\" onclick=\"window.cartSystem.clearCart(); window.modalSystem.hideModal('cart-modal')\">Clear Cart</button>\n                        <button class=\"action-btn primary\" onclick=\"window.cartSystem.checkout()\">Checkout</button>\n                    </div>\n                </div>\n            `;\n        }\n        \n        content += '</div>';\n        \n        window.modalSystem.showModal('cart-modal', content, 'cart-modal');\n    }\n\n    /**\n     * Handle checkout process\n     */\n    checkout() {\n        if (this.cart.length === 0) {\n            if (window.toastSystem) {\n                window.toastSystem.showWarning('Your cart is empty!');\n            }\n            return;\n        }\n        \n        // Close cart modal\n        window.modalSystem.hideModal('cart-modal');\n        \n        // Show checkout confirmation\n        const total = this.getCartTotal();\n        const message = `Complete your purchase of ${this.cartCount} items for AED ${total.toLocaleString()}?`;\n        \n        window.modalSystem.showConfirmationModal(\n            'Checkout',\n            message,\n            () => {\n                this.completeCheckout();\n            },\n            () => {\n                // Cancelled - reopen cart\n                this.showCartModal();\n            }\n        );\n    }\n\n    /**\n     * Complete checkout process\n     */\n    completeCheckout() {\n        // Simulate checkout process\n        const loadingToast = window.toastSystem?.showLoading('Processing your order...');\n        \n        setTimeout(() => {\n            // Clear cart\n            this.clearCart();\n            \n            // Update loading toast to success\n            if (loadingToast) {\n                window.toastSystem.updateLoadingToast(loadingToast, 'Order placed successfully! ðŸŽ‰', 'success');\n            } else {\n                window.toastSystem?.showSuccess('Order placed successfully! ðŸŽ‰');\n            }\n            \n            this.notifyListeners('checkout_complete');\n        }, 2000);\n    }\n\n    /**\n     * Parse price string to number\n     */\n    parsePrice(priceString) {\n        if (typeof priceString === 'number') return priceString;\n        \n        // Remove currency symbols and commas, then parse\n        return parseFloat(priceString.replace(/[^0-9.-]+/g, '')) || 0;\n    }\n\n    /**\n     * Save cart to localStorage\n     */\n    saveCart() {\n        try {\n            localStorage.setItem('premium_store_cart', JSON.stringify(this.cart));\n        } catch (error) {\n            console.error('Error saving cart:', error);\n        }\n    }\n\n    /**\n     * Load cart from localStorage\n     */\n    loadCart() {\n        try {\n            const savedCart = localStorage.getItem('premium_store_cart');\n            return savedCart ? JSON.parse(savedCart) : [];\n        } catch (error) {\n            console.error('Error loading cart:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Handle storage changes (for multi-tab sync)\n     */\n    handleStorageChange(event) {\n        if (event.key === 'premium_store_cart') {\n            this.cart = this.loadCart();\n            this.updateCartDisplay();\n        }\n    }\n\n    /**\n     * Add event listener\n     */\n    addEventListener(event, callback) {\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, new Set());\n        }\n        this.listeners.get(event).add(callback);\n    }\n\n    /**\n     * Remove event listener\n     */\n    removeEventListener(event, callback) {\n        const eventListeners = this.listeners.get(event);\n        if (eventListeners) {\n            eventListeners.delete(callback);\n        }\n    }\n\n    /**\n     * Notify listeners\n     */\n    notifyListeners(event, data) {\n        const eventListeners = this.listeners.get(event);\n        if (eventListeners) {\n            eventListeners.forEach(callback => {\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error('Error in cart event listener:', error);\n                }\n            });\n        }\n    }\n\n    /**\n     * Destroy cart system\n     */\n    destroy() {\n        window.removeEventListener('storage', this.handleStorageChange);\n        this.listeners.clear();\n        \n        console.log('CartSystem destroyed');\n    }\n}\n\n// Export for module usage\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = CartSystem;\n}"